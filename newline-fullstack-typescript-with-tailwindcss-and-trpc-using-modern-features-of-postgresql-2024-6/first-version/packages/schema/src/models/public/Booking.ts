// @generated
// This file is automatically generated by Kanel. Do not modify manually.

import { customerId } from './Customer';
import type { CustomerId } from './Customer';
import { providerId } from './Provider';
import type { ProviderId } from './Provider';
import { Range } from 'postgres-range';
import { z } from 'zod';

/** Identifier type for public.booking */
export type BookingId = number & { __brand: 'BookingId' };

/**
 * Represents the table public.booking
 * Represents a booking made by a given customer, for a given provider. Guaranteed not to overlap with other bookings for said provider.
 */
export default interface Booking {
  id: BookingId;

  customer_id: CustomerId;

  provider_id: ProviderId;

  /** Time of the booking */
  during: Range<Date>;
}

/**
 * Represents the initializer for the table public.booking
 * Represents a booking made by a given customer, for a given provider. Guaranteed not to overlap with other bookings for said provider.
 */
export interface BookingInitializer {
  id?: BookingId;

  customer_id: CustomerId;

  provider_id: ProviderId;

  /** Time of the booking */
  during: Range<Date>;
}

/**
 * Represents the mutator for the table public.booking
 * Represents a booking made by a given customer, for a given provider. Guaranteed not to overlap with other bookings for said provider.
 */
export interface BookingMutator {
  id?: BookingId;

  customer_id?: CustomerId;

  provider_id?: ProviderId;

  /** Time of the booking */
  during?: Range<Date>;
}

export const bookingId: z.Schema<BookingId> = z.number() as any;

export const booking: z.Schema<Booking> = z.object({
  id: bookingId,
  customer_id: customerId,
  provider_id: providerId,
  during: z.string(),
}) as any;

export const bookingInitializer: z.Schema<BookingInitializer> = z.object({
  id: bookingId.optional(),
  customer_id: customerId,
  provider_id: providerId,
  during: z.string(),
}) as any;

export const bookingMutator: z.Schema<BookingMutator> = z.object({
  id: bookingId.optional(),
  customer_id: customerId.optional(),
  provider_id: providerId.optional(),
  during: z.string().optional(),
}) as any;
