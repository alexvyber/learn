// @generated
// This file is automatically generated by Kanel. Do not modify manually.

import { customerId, type CustomerId } from './Customer';
import { providerId, type ProviderId } from './Provider';
import { z } from 'zod';

/** Identifier type for public.booking */
export type BookingId = number & { __brand: 'BookingId' };

/**
 * Represents the table public.booking
 * Represents a booking made by a given customer, for a given provider. Guaranteed not to overlap with other bookings for said provider.
 */
export default interface Booking {
  id: BookingId;

  customer_id: CustomerId;

  provider_id: ProviderId;

  /** Time of the booking */
  during: string;
}

/**
 * Represents the initializer for the table public.booking
 * Represents a booking made by a given customer, for a given provider. Guaranteed not to overlap with other bookings for said provider.
 */
export interface BookingInitializer {
  id?: BookingId;

  customer_id: CustomerId;

  provider_id: ProviderId;

  /** Time of the booking */
  during: string;
}

/**
 * Represents the mutator for the table public.booking
 * Represents a booking made by a given customer, for a given provider. Guaranteed not to overlap with other bookings for said provider.
 */
export interface BookingMutator {
  id?: BookingId;

  customer_id?: CustomerId;

  provider_id?: ProviderId;

  /** Time of the booking */
  during?: string;
}

export const bookingId = z.number() as unknown as z.Schema<BookingId>;

export const booking = z.object({
  id: bookingId,
  customer_id: customerId,
  provider_id: providerId,
  during: z.string(),
}) as unknown as z.Schema<Booking>;

export const bookingInitializer = z.object({
  id: bookingId.optional(),
  customer_id: customerId,
  provider_id: providerId,
  during: z.string(),
}) as unknown as z.Schema<BookingInitializer>;

export const bookingMutator = z.object({
  id: bookingId.optional(),
  customer_id: customerId.optional(),
  provider_id: providerId.optional(),
  during: z.string().optional(),
}) as unknown as z.Schema<BookingMutator>;
